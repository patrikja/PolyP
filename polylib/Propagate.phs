module Propagate(propagate,fprop,sumprop,prodprop) where
import Base(cata,pmap)

propagate  :: Regular d => d (Maybe a) -> Maybe (d a)
propagate  =  cata (fmap inn . fprop)

c21 f g x y = f (g x) (g y)

polytypic fprop :: f (Maybe a) (Maybe b) -> Maybe (f a b)
  = case f of
      g + h     ->  sumprop . (fprop -++- fprop)
      g * h     ->  prodprop . (fprop -**- fprop)
      Empty     ->  \EmptyF -> Just EmptyF
      Par       ->  fmap ParF . unParF
      Rec       ->  fmap RecF . unRecF
      d @ g     ->  fmap CompF . propagate . (pmap fprop) . unCompF
      Const t   ->  fmap ConstF . Just . unConstF

sumprop = either (fmap InL) (fmap InR)

prodprop p = case p of
   (Just x, Just y) -> Just (x:*:y)
   _                -> Nothing

