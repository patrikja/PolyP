%% Literate PolyP + LaTeX script for use with lhs2TeX -*- Mode: latex; -*-
% ------------------------------------------------------------
% Equivalence
%   990527 Patrik Jansson 
% ------------------------------------------------------------

> module Equal(pequal,fequal,peq) where

> peq :: (Regular d, Eq a) => d a -> d a -> Bool
> peq = pequal (==)

%{
%align 27

> pequal :: Regular d => (a->b->Bool) -> d a -> d b -> Bool
> pequal eq x y = fequal eq (pequal eq) (out x) (out y)

> polytypic fequal :: (a->b->Bool) -> (c->d->Bool) -> 
>                     f a c -> f b d -> Bool
>   = \p r -> case f of
>               g + h     ->  sumequal  (fequal p r) (fequal p r)
>               g * h     ->  prodequal (fequal p r) (fequal p r)
>               Empty     ->  \_ _ -> True
>               Par       ->  p
>               Rec       ->  r
>               d @ g     ->  pequal (fequal p r)
>               Const t   ->  (==) 

%align
%}
%{
%align 45

> sumequal :: (a->b->Bool) -> (c->d->Bool) -> 
>             Either a c -> Either b d -> Bool
> sumequal f g a b = case (a,b) of
>                      (Left  x, Left  v)   ->  f x v
>                      (Right y, Right w)   ->  g y w
>                      _                    ->  False

%align
%}

> prodequal :: (a->b->Bool) -> (c->d->Bool) -> (a,c)->(b,d) -> Bool
> prodequal f g p q = f (fst p) (fst q) && g (snd p) (snd q)

%if not codeOnly

A slightly less lazy variant:

> prodequal f g (x,y) (v,w) = f x v && g y w

%endif not codeOnly

