%% Literate PolyP + LaTeX script for use with lhs2TeX -*- Mode: latex; -*-
% ------------------------------------------------------------
% Flatten
%   990527 Patrik Jansson
% ------------------------------------------------------------

> module Flatten(flatten,fflatten,fl_par,fl_rec,fl_all,singleton,nil) where
> import Base(pmap,fmap2)

%{
%align 22

> flatten :: Regular d => d a -> [a]
> flatten  =  fflatten . fmap2 singleton flatten . out
> 
> polytypic fflatten ::  f [a] [a] -> [a]
>   = case f of
>       g + h        ->  fflatten `either` fflatten
>       g * h        ->  \(x,y) -> fflatten x ++ fflatten y
>       Empty        ->  nil
>       Par          ->  id
>       Rec          ->  id
>       d @ g        ->  concat . flatten . pmap fflatten 
>       Const t      ->  nil

%align
%}
%{
%align 10

> fl_par :: Bifunctor f => f a b -> [a]
> fl_rec :: Bifunctor f => f a b -> [b]
> fl_all :: Bifunctor f => f a a -> [a]
> fl_par = fflatten . fmap2 singleton nil
> fl_rec = fflatten . fmap2 nil       singleton
> fl_all = fflatten . fmap2 singleton singleton

%align
%}

%if not codeOnly

A variant: defining |flatten| using |cata|:

> flatten  =  cata (fflatten . fmap2 singleton id)

Function |flatten| can also be defined using |crush| (see the module
|CrushFuns|).

%endif

\paragraph{Help functions for lists}

%{
%align 15

> singleton   :: a -> [a]
> singleton x =  [x]
>
> nil         :: a -> [b]
> nil       x =  []

%align
%}

%if variants

%{
%align 20

> polytypic fl_rec :: f a b -> [b]
>   = case f of
>       g + h      ->  fl_rec `either` fl_rec
>       g * h      ->  \(x,y) -> fl_rec x ++ fl_rec y
>       Empty      ->  nil
>       Par        ->  nil
>       Rec        ->  singleton
>       d @ g      ->  concat . flatten . pmap fl_rec 
>       Const t    ->  nil

> polytypic fl_par :: f a [a] -> [a]
>   = case f of
>       g + h      ->  fl_par `either` fl_par
>       g * h      ->  \(x,y) -> fl_par x ++ fl_par y
>       Empty      ->  nil
>       Par        ->  singleton
>       Rec        ->  nil
>       d @ g      ->  concat . flatten . pmap fl_par 
>       Const t    ->  nil

%align
%}

%endif variants

