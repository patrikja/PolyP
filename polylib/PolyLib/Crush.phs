module PolyLib.Crush(crush,fcrush) where 
import PolyLib.Prelude
import PolyLib.Base(cata,pmap)
crush :: Regular d => (a->a->a) -> a -> d a -> a
crush op e =  cata (fcrush op e)
polytypic fcrush ::   (a->a->a) -> a -> f a a -> a
  = \op e -> case f of 
               g + h   ->  fcrush op e `foldSum` fcrush op e
               g * h   ->  \(x:*:y) -> op (fcrush op e x)
                                          (fcrush op e y)
               Empty   ->  \x -> e
               Par     ->  unParF
               Rec     ->  unRecF
               d @ g   ->  crush op e . pmap (fcrush op e) . unCompF
               Const t ->  \x -> e
