module PolyLib.Zip(pzip,fzip,pzipWith,pzipWith',fzipWith,punzip) where
import PolyLib.Prelude

import PolyLib.Base(pmap,fmap2)
import PolyLib.Propagate(fprop,propagate,sumprop,prodprop)

punzip :: Regular d => d (a,b) -> (d a,d b)
punzip x = (pmap fst x, pmap snd x)

funzip :: Bifunctor f => f (a,c) (b,d) -> (f a b,f c d)
funzip x = (fmap2 fst fst x, fmap2 snd snd x)

pzip :: Regular d => (d a,d b) -> Maybe (d (a,b))
pzip  = (innM @@ (fprop.fmap2 return pzip) @@ fzip ) . (out `mapPair` out)

pzipWith' :: Regular d => (FunctorOf d c e -> e) -> 
                          ((d a,d b)->e) -> 
                          ((a,b)->c) -> (d a,d b) -> e
pzipWith' ins fail op (x,y)  =
  maybe (fail (x,y)) (ins . fmap2 op (pzipWith' ins fail op)) 
        (fzip (out x, out y))

pzipWith :: Regular d => ((a, b) -> Maybe c) -> (d a, d b) -> Maybe (d c)
pzipWith  = pzipWith' (fmap inn.fprop) (const zeroM)

fzipWith :: ((a,a')->c) -> ((b,b')->d) -> (f a b, f a' b') -> Maybe (f c d)
fzipWith f g = fmap (fmap2 f g) . fzip 

polytypic fzip  :: (f a b,f c d) -> Maybe (f (a,c) (b,d))
  = case f of   
      g + h     ->  (sumprop  . ((Left . fzip) `either` (Right . fzip))) @@ sumzip
      g * h     ->  (prodprop . (fzip `mapPair` fzip)) @@ prodzip
      Empty     ->  const (return EmptyF)
      Par       ->  \(ParF x,ParF y) -> return $ ParF (x,y)
      Rec       ->  \(RecF x,RecF y) -> return $ RecF (x,y)
      d @ g     ->  (fmap CompF . propagate . (pmap fzip)) @@ (pzip . mapPair unCompF unCompF)
      Const t   ->  fmap ConstF . constzip . mapPair unConstF unConstF

sumzip p = case p of
             (InL s, InL t) -> return (Left (s,t))
             (InR s, InR t) -> return (Right (s,t))
             _              -> zeroM

mapPair :: (a -> c) -> (b -> d) -> (a,b) -> (c,d)
mapPair f g (x,y) = (f x,g y)

prodzip ((a:*:b),(c:*:d))  =  Just ((a,c),(b,d))

constzip :: Eq t => (t,t) -> Maybe t
constzip (x,y) = if x==y then return x else zeroM

(@@)     :: (a -> Maybe b) -> (c -> Maybe a) -> c -> Maybe b
g @@ f = \a -> f a >>= g

zeroM :: Maybe a
zeroM = Nothing

innM :: Regular d => FunctorOf d a (d a) -> Maybe (d a)
innM  =  return . inn

