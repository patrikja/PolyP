module PolyLib.Equal(pequal,fequal,peq) where
import PolyLib.Prelude

peq :: (Regular d, Eq a) => d a -> d a -> Bool
peq = pequal (==)

pequal :: Regular d => (a->b->Bool) -> d a -> d b -> Bool
pequal eq x y = fequal eq (pequal eq) (out x) (out y)

polytypic fequal :: (a->b->Bool) -> (c->d->Bool) -> 
                    f a c -> f b d -> Bool
  = \p r -> case f of
              g + h     ->  sumequal  (fequal p r) (fequal p r)
              g * h     ->  prodequal (fequal p r) (fequal p r)
              Empty     ->  \_ _ -> True
              Par       ->  \x y -> p (unParF x) (unParF y)
              Rec       ->  \x y -> r (unRecF x) (unRecF y)
              d @ g     ->  \x y -> pequal (fequal p r) (unCompF x) (unCompF y)
              Const t   ->  \x y -> unConstF x == unConstF y

sumequal f g a b = case (a,b) of
                     (InL  x, InL  v) ->  f x v
                     (InR y, InR w)   ->  g y w
                     _                ->  False

prodequal f g (p:*:p') (q:*:q') = f p q && g p' q'
