module PolyLib.Flatten(flatten,fflatten,fl_par,fl_rec,fl_all,singleton,nil,substructures) where
import PolyLib.Prelude
import PolyLib.Base(pmap,fmap2)

flatten :: Regular d => d a -> [a]
flatten  =  fflatten . fmap2 singleton flatten . out

polytypic fflatten ::  f [a] [a] -> [a]
  = case f of
      g + h        ->  fflatten `foldSum` fflatten
      g * h        ->  \(x:*:y) -> fflatten x ++ fflatten y
      Empty        ->  nil
      Par          ->  unParF
      Rec          ->  unRecF
      d @ g        ->  concat . flatten . pmap fflatten . unCompF
      Const t      ->  nil

fl_par :: Bifunctor f => f a b -> [a]
fl_rec :: Bifunctor f => f a b -> [b]
fl_all :: Bifunctor f => f a a -> [a]
fl_par = fflatten . fmap2 singleton nil
fl_rec = fflatten . fmap2 nil       singleton
fl_all = fflatten . fmap2 singleton singleton

substructures :: Regular d => d a -> [d a]
substructures x = x : fflatten (fmap2 nil substructures (out x))

singleton   :: a -> [a]
singleton x =  [x]

nil         :: a -> [b]
nil       x =  []
