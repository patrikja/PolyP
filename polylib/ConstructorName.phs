---------------------------------------------------------------
-- ConstructorName
--   990526 Patrik Jansson
module ConstructorName where
---------------------------------------------------------------
constructorName :: Regular d => d a -> String
constructorName = fconstructorName . out
-- fconstructorName :: Bifunctor f => f a b -> [Char]  is built in

constructorNames :: Regular d => d a -> [String]
constructorNames x = 
  map fconstructorName (fconstructors `asTypeOf` [out x])

constructors  :: Regular d => [d a]
constructors  =  map inn fconstructors

polytypic fconstructors :: [f a b] =
  case f of 
    g + h -> map Left fconstructors ++ map Right fconstructors
    g     -> [undefined]

constructor2Int :: Regular d => d a -> Int
constructor2Int = fconstructor2Int . out

polytypic fconstructor2Int :: f a b -> Int =
  case f of 
    g + h -> const 0 `either` (plus1 . fconstructor2Int)
    g     -> const 0

plus1 :: Int -> Int
plus1 x = 1 + x

int2constructor :: Regular d => Int -> d a
int2constructor n = constructors !! n

int2fconstructor :: Bifunctor f => Int -> f a b
int2fconstructor n = fconstructors !! n
