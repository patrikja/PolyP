-- This definition is not type correct, and this is reported by PolyP.

main = fscan2 (out "Hej")

polytypic fscan2 :: f a b -> [f a b]
  = case f of
        f * g -> \(x,y) -> fscan2 x ++ fscan2 y
--        Par   -> \x -> [x]
--        Rec   -> \x -> [x]
--        Empty -> const []

{-
By hand:
  fscan2 :: f a b -> [f a b] 
First infer the type of
  \(x,y) -> fscan2 x ++ fscan2 y
gives
  tau  = (f' a' b',f' a' b') -> [f' a' b'] 
and teval gives
  tau' = (g*h) a b           -> [(g*h) a b] 
       = (g a b, h a b)      -> [(g a b, h a b)]

checkInstance complains that tau is not an instance of tau'

The error is the pair to the right of the function arrow.
-}
